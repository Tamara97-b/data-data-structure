/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package hashtable;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Set;

public class Library {
    public static void main(String[] args) throws Exception {
        System.out.println("hellooooooooo");
         HashTable<String> hashTable=new HashTable<String>(5);
         hashTable.add("4","tamara");
         hashTable.add("1","lara");
         hashTable.add("3","jood");
        System.out.println(hashTable.get("3"));
        System.out.println(hashTable.contain("7"));


        BinaryTree<Integer> binaryTreeOne = new BinaryTree<>(new Node<>(7));
        Node<Integer> node1 = new Node<>(20);
        Node<Integer> node2 = new Node<>(12);
        Node<Integer> node3 = new Node<>(5, node1, node2);
        Node<Integer> node5 = new Node<>(16);
        Node<Integer> node4 = new Node<>(3, node5, null);
        binaryTreeOne.root.rightChild = node4;
        binaryTreeOne.root.leftChild = node3;


        BinaryTree<Integer> binaryTreeTwo = new BinaryTree<>(new Node<>(47));
        Node<Integer> node6 = new Node<>(5);
        Node<Integer> node7 = new Node<>(16);
        Node<Integer> node8 = new Node<>(7, node6, node7);
        Node<Integer> node9 = new Node<>(58);
        Node<Integer> node10 = new Node<>(3, node9, null);
        binaryTreeTwo.root.rightChild = node10;
        binaryTreeTwo.root.leftChild = node8;

        System.out.println(treeIntersection(binaryTreeOne, binaryTreeTwo));



        HashMap<String, String> one= new HashMap<>();
        one.put("fond", "enamored");
        one.put("wrath", "anger");
        one.put("diligent", "employed");
        one.put("outfit", "garb");
        one.put("guide", "usher");

        HashMap<String, String> two = new HashMap<>();
        two.put("fond", "averse");
        two.put("something", "delight");

        System.out.println(leftJoin(one,two));

    }

    public static <V> ArrayList<V> treeIntersection(BinaryTree<V> tree1, BinaryTree<V> tree2) {
        ArrayList<V> response = new ArrayList<>();
        if (tree1.root==null || tree2.root==null) {
            return null;
        } else {
            List<V> inTree1 = tree1.preOrder(tree1.root);
            System.out.println(inTree1);
            List<V> inTree2 = tree2.preOrder(tree2.root);
            for (V val : inTree1) {
                if (inTree2.contains(val)) {
                    response.add(val);
                }
            }
            return response;
        }

    }

    public static ArrayList<ArrayList<String>> leftJoin(HashMap ht1, HashMap ht2) {
        ArrayList<ArrayList<String>> result = new ArrayList<>();

        Set ht1KeySet  = ht1.keySet();
        for (Object key : ht1KeySet) {
            ArrayList<String> strings = new ArrayList<>();

            strings.add(String.valueOf(key));
            strings.add(String.valueOf(ht1.get(key)));

            if (ht2.containsKey(key)) {
                strings.add(String.valueOf(ht2.get(key)));
            } else {
                strings.add(null);
            }

            result.add(strings);
        }

        return result;
    }

}
